//repeller.js

class Repeller {
  constructor(x, y) {
    this.position = createVector(x, y);
    //{!1} How strong is the repeller?
    this.power = 150;
  }
  
  move(value) {
    this.position.y -= value;
  }
  
  setPower(value) {
    this.power = map(value, 0, width, -300, 300);
  }

  show() {
  stroke(0);
  strokeWeight(2);
  fill(190);
  

  const size = 20; // Adjust the size as needed
  const x = this.position.x;
  const y = this.position.y - size / sqrt(3);
  
  beginShape();
  vertex(x, y + size / sqrt(3));
  vertex(x - size / 2, y - size / (2 * sqrt(3)));
  vertex(x + size / 2, y - size / (2 * sqrt(3)));
  endShape(CLOSE);
}

  repel(particle) {
    //{!6 .code-wide} This is the same repel algorithm we used in Chapter 2: forces based on gravitational attraction.
    let force = p5.Vector.sub(this.position, particle.position);
    let distance = force.mag();
    distance = constrain(distance, 5, 50);
    let strength = (-1 * this.power) / (distance * distance);
    force.setMag(strength);
    return force;
  }
}
